import pickle

from tqdm import tqdm

import tensorflow as tf
import numpy as np
import imageio


class DeepTeslaLoader:
    def __init__(self, config):
        self.config = config

        self.reader = imageio.get_reader(self.config.video_file)
        self.num_frames = self.reader.get_length()-2
        self.start_ix = 1
        self.cur_frame_t0 = self.reader.get_next_data()[np.newaxis]
        self.end_ix = 1

        dataset = tf.data.Dataset().from_generator(self.batch_generator, output_types=tf.float32,
                                                   output_shapes=(tf.TensorShape([None, 720, 1280, 3])))
        self.iter = dataset.make_initializable_iterator()
        self.el = self.iter.get_next()

    def batch_generator(self):
        frames_t0 = self.cur_frame_t0
        for _ in range(self.config.batch_size - 1):
            if (self.end_ix + 1) < self.num_frames:
                frames_t0_i = self.reader.get_next_data()[np.newaxis]
                frames_t0 = np.append(frames_t0, frames_t0_i, axis=0)
                self.end_ix += 1
            else:
                break

        frames_t1 = frames_t0[1:, :, :, :]
        try:
            self.cur_frame_t0 = frames_t1_b = self.reader.get_next_data()[np.newaxis]
        except:
            return None, None
        frames_t1 = np.append(frames_t1, frames_t1_b, axis=0)

        print("t0: {start_t0}-{end_t0}; t1: {start_t1}-{end_t1}; total: {total}".format(
            start_t0=self.start_ix,
            end_t0=self.end_ix,
            total=self.num_frames,
            start_t1=self.start_ix + 1,
            end_t1=self.end_ix + 1
        ))
        self.start_ix = self.end_ix + 1
        self.end_ix = self.start_ix

        return frames_t0, frames_t1

    def next_batch(self):
        with tf.Session() as sess:
            sess.run(self.iter.initializer)
            out = sess.run(self.el)


if __name__ == '__main__':
    from easydict import EasyDict

    config = EasyDict({"video_file": "../data/deeptesla/epochs/epoch01_front.mkv",
              "batch_size": 10})

    data_loader = DeepTeslaLoader(config)
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()
    I_t0, I_t1 = data_loader.next_batch()